"use strict"

function first() {
    // Do something
    setTimeout(function() {
        console.log(1);
    }, 500);
}

function second() {
    console.log(2);
}

first();
second();
// В примере выше вызываем 2 функции. И предпологаем, что отработают они по очереди
// но из-за задержки в 500 милисекунд в первой функции она отработывает только после второй.
// Это может плохо кончится, если обе функции работают с одними данными. И нам нужно, чтобы они отработали
// строго одна за одной. А время ожидания может приходить от сервера. И его контралировать мы не можем
// CALLBACK - функция, котороая должна быть выполнена только после того, как другая функция завершила свою работу

// Шаблон callback функции. В качестве другого аргумента в функции мы передаем другую функцию(callback)
function learnJS(lang, callback) {
    console.log(`Я учю: ${lang}`);
    callback();
}

function done() {
    console.log("Я готов к работе");
}
// ПРИ ВЫЗОВЕ ФУНКЦИИ LEARNJS() ВТОРОЙ ПАРАМЕТР DONE СТОИТ БЕЗ КРУГЛЫХ СКОБОК
// Ведь мы не вызываем в параметрах эту функцию, а передаем ее как параметр.
// Вызывается она уже в теле функции LearnJS как callback
learnJS("C++", done);

// Можем так-же передать анонимную функцию
learnJS("Java", function() {
    console.log("Я прошел этот урок");
});