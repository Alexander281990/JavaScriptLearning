"use strict";

// Типы данных

// 1. Простые типы
// 1.1 - Числа(1, 3, 98, -34)
// 1.2 - Строки("string", 'name', `Александер`)
// 1.3 - Логический тип(boolean)
// 1.4 - null(когда ничего не существует)
// 1.5 - undefined(когда что-то существует, но значения никакого нет(например стоит холодильник, 
      // но абсолютно пустой))
// 1.6 - Symbol
// 1.7 - BigInt(большие числа)

// 2. Объекты
// 2.1 Специальные объекты
// 2.1.1 - Массивы[]
// 2.1.2 - Функции function
// 2.1.3 - Объект даты
// 2.1.4 - Регулярные выражения
// 2.1.5 - Ошибки
// 2.2 - Обычные объекты


// 1.1 - числа
let number = 4.5;
console.log(4/0); // получаем Infinity
console.log(-4/0); // получаем -Infinity
console.log("string" * 9); // получаем NaN
// Infinity - числовой тип данных обозначающий бесконечность
// NaN - не числовой тип данных(или не число)

// 1.2 - строка
const persone1 = "Alex";
const persone2 = 'Alex';
const persone3 = `Alex`; // бектики(косые кавычки)
const phrase = "Introduse my self";
// интерполяция строк с помощью бектиков
// с помощью бектиков в нутрь строки можно вставить переменную с помощью ${имя переменной}
const category = 'toys';
const urlPath = `https://someurl.com/${category}`;
console.log(urlPath);

// 1.3 - boolean
const bool = false;

// 1.4 - null
//console(something); // пытаемся использовать объект somesing, которого не сужествует
                    // получаем такую ошибку "Uncaught ReferenceError: something is not defined"

// 1.5 - undefined
let und; // переменная существует, но абсолютно пустая
console.log(und); // получаем undefined

// 2 - объекты
// Объект состоит из данных(свойства), и действый(методы) 
const obj = {
    // три строчки ниже - это свойства
    // формат записи свойств: ключ - значение
    // myName - ключ, "John" - значение
    myName: "John",
    age: 25,
    isMarried: false,
};
// добираемся до каких-либо свойств
console.log(obj.age); // через точку
console.log(obj["myName"]); // через квадратные скобки. Если через скобки обращаемся, то обязательно 
                            // внутри ставим ковычки "myName". Иначе JavaScript думает, что мы обращаемся 
                            // к не существующей переменной


// 2.1.1 - массивы[]
// Массив это НЕ ОТДЕЛЬНЫЙ ТИП ДАННЫХ. Это частный случай объектов
// Используется для хранения данных, которые идут строго по порядку
// В нутри массива можно вставлять обсалютно любые другие типы данных
let arr = ['plum.png', 'orange.jpg', 'apple.bmp', 4, {}, []];
console.log(arr[5]);

// Разница между массивами и объектами
const arrNew = [1, 2, 3]; // массив
const objNew = {a: 1, b: 2, c: 3,}; // объект
const objPersons = {
    'Anna': 500,
    Alice: 800,
    // свойства в объектах - это всегда строки. Можем записать как в кавычках('Anna'), так и без ковычек(Alice)
    // если записали без ковычек, то объект сам понимает, что это строка
}
// функциональные возможности объекта
// доступ к свойствам через точку
const arrObj = {
    1: 'a',
    2: 'b',
    3: 'c',
};
//console.log(arrObj.1); // ошибка. Здесь js не понимает, что 1 - это строка(или ключ). Но пример ниже отработает нормально
const arrObj2 = {
    a: 'a',
    2: 'b',
    3: 'c',
};
console.log(arrObj2.a); // здесь уже все хорошо. 'a' - логически понятно, что строка. И js все понимает
// доступ через квадратные скобки
const arrObj3 = {
    1: 'a',
    2: 'b',
    3: 'c',
};
console.log(arrObj3['1']); // через квадратные скобки все хорошо отрабатывает
// ПРИОРИТЕТНЕЕ ПРИ ДОСТУПЕ К ПОЛЯМ ОБЪЕКТА ИСПОЛЬЗОВАТЬ КВАДРАТНЫЕ СКОБКИ
// ОНИ ВСЕГДА ОТРАБАТЫВАЮТ ПРАВИЛЬНО
// НО ЗНАЧЕНИЕ В НУТРИ СКОБОК ВСЕГДА ЗАПИСЫВАЕТСЯ В КОВЫЧКАХ arrObj3['1']

// добавление новых данных в объект
// можно как через точку, так и через квадратные скобки
const arrObj4 = {
    1: 'a',
    2: 'b',
    3: 'c',
};
arrObj4.b = "12345"; // добавили новое свойство
//console.log(arrObj4[b]); // ошибка
console.log(arrObj4['b']); // через кавычки все работает
console.log(arrObj4.b); // так тоже можно
//arrObj4.4 = "Sasha"; // ошибка. Через точку ключ как число создать нельзя. js не понимает, что это строка
// ЗНАЧЕНИЕ В НУТРИ СКОБОК ВСЕГДА ЗАПИСЫВАЕТСЯ В КОВЫЧКАХ arrObj4['Sasha']
arrObj4[4] = "Sasha"; // а через квадратные скобки можно
//arrObj4[c] = "Sasha c"; // ошибка. Так уже нельзя. JS думает, что с - это переменная, которой не существует
arrObj4['c'] = "Sasha c"; // так можно
arrObj4['5'] = "Sasha 5"; // а через квадратные скобки можно
console.log(arrObj4['4']); // ЗНАЧЕНИЕ В НУТРИ СКОБОК ЗАПИСЫВАЕТСЯ В КОВЫЧКАХ arrObj4['4']
console.log(arrObj4[4]); // ТАК ТОЖЕ МОЖНО
console.log(arrObj4['5']); // ТАК ТОЖЕ МОЖНО
console.log(arrObj4['c']); // ТАК ТОЖЕ МОЖНО
// добавление свойства через существующую переменную
const arrObj5 = {
    1: 'a',
    2: 'b',
    3: 'c',
};
const b = 'b'; // обратить внимание на запись ниже
arrObj5[b] = "123"; // так уже можно. JS уже видит, что b существует и добовляет его значение в объект
console.log(arrObj5.b); // можно
console.log(arrObj5[b]); // можно
console.log(arrObj5['b']); // можно

// создание объекта внутри другого объекта
const arrObj6 = {
    1: 'a',
    2: 'b',
    3: 'c',
    'obj7': {
        'name': "Ira",
        'age': 32,
        objChildren: {
            name1: "Egor",
            name2: "Nika",
        }
    }
};